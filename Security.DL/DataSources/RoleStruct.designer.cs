#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Security.DL.DataSources
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class RoleStructDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertRO_SysModuleMTR(RO_SysModuleMTR instance);
    partial void UpdateRO_SysModuleMTR(RO_SysModuleMTR instance);
    partial void DeleteRO_SysModuleMTR(RO_SysModuleMTR instance);
    partial void InsertRO_SysPromissionMTR(RO_SysPromissionMTR instance);
    partial void UpdateRO_SysPromissionMTR(RO_SysPromissionMTR instance);
    partial void DeleteRO_SysPromissionMTR(RO_SysPromissionMTR instance);
    partial void InsertRolePromission(RolePromission instance);
    partial void UpdateRolePromission(RolePromission instance);
    partial void DeleteRolePromission(RolePromission instance);
    partial void InsertRoleMTR(RoleMTR instance);
    partial void UpdateRoleMTR(RoleMTR instance);
    partial void DeleteRoleMTR(RoleMTR instance);
    partial void InsertRoleModule(RoleModule instance);
    partial void UpdateRoleModule(RoleModule instance);
    partial void DeleteRoleModule(RoleModule instance);
    #endregion
		
		public RoleStructDataContext() : 
				base(global::Security.DL.Properties.Settings.Default.Security_WPFConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RoleStructDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RoleStructDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RoleStructDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RoleStructDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RO_SysModuleMTR> RO_SysModuleMTR
		{
			get
			{
				return this.GetTable<RO_SysModuleMTR>();
			}
		}
		
		public System.Data.Linq.Table<RO_SysPromissionMTR> RO_SysPromissionMTR
		{
			get
			{
				return this.GetTable<RO_SysPromissionMTR>();
			}
		}
		
		public System.Data.Linq.Table<RolePromission> RolePromission
		{
			get
			{
				return this.GetTable<RolePromission>();
			}
		}
		
		public System.Data.Linq.Table<RoleMTR> RoleMTR
		{
			get
			{
				return this.GetTable<RoleMTR>();
			}
		}
		
		public System.Data.Linq.Table<RoleModule> RoleModule
		{
			get
			{
				return this.GetTable<RoleModule>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysModuleMTR")]
	public partial class RO_SysModuleMTR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _ModuleName;
		
		private EntityRef<RO_SysPromissionMTR> _RO_SysPromissionMTR;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnModuleNameChanging(string value);
    partial void OnModuleNameChanged();
    #endregion
		
		public RO_SysModuleMTR()
		{
			this._RO_SysPromissionMTR = default(EntityRef<RO_SysPromissionMTR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._RO_SysPromissionMTR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleName", DbType="NVarChar(50)")]
		public string ModuleName
		{
			get
			{
				return this._ModuleName;
			}
			set
			{
				if ((this._ModuleName != value))
				{
					this.OnModuleNameChanging(value);
					this.SendPropertyChanging();
					this._ModuleName = value;
					this.SendPropertyChanged("ModuleName");
					this.OnModuleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RO_SysPromissionMTR_RO_SysModuleMTR", Storage="_RO_SysPromissionMTR", ThisKey="ID", OtherKey="ModuleID", IsForeignKey=true)]
		internal RO_SysPromissionMTR RO_SysPromissionMTR
		{
			get
			{
				return this._RO_SysPromissionMTR.Entity;
			}
			set
			{
				RO_SysPromissionMTR previousValue = this._RO_SysPromissionMTR.Entity;
				if (((previousValue != value) 
							|| (this._RO_SysPromissionMTR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RO_SysPromissionMTR.Entity = null;
						previousValue.RO_SysModuleMTR.Remove(this);
					}
					this._RO_SysPromissionMTR.Entity = value;
					if ((value != null))
					{
						value.RO_SysModuleMTR.Add(this);
						this._ID = value.ModuleID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("RO_SysPromissionMTR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysPromissionMTR")]
	public partial class RO_SysPromissionMTR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ModuleID;
		
		private string _PermissionName;
		
		private string _SysCode;
		
		private System.Nullable<int> _Seq;
		
		private EntitySet<RO_SysModuleMTR> _RO_SysModuleMTR;
		
		private EntityRef<RolePromission> _RolePromission;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnModuleIDChanging(System.Guid value);
    partial void OnModuleIDChanged();
    partial void OnPermissionNameChanging(string value);
    partial void OnPermissionNameChanged();
    partial void OnSysCodeChanging(string value);
    partial void OnSysCodeChanged();
    partial void OnSeqChanging(System.Nullable<int> value);
    partial void OnSeqChanged();
    #endregion
		
		public RO_SysPromissionMTR()
		{
			this._RO_SysModuleMTR = new EntitySet<RO_SysModuleMTR>(new Action<RO_SysModuleMTR>(this.attach_RO_SysModuleMTR), new Action<RO_SysModuleMTR>(this.detach_RO_SysModuleMTR));
			this._RolePromission = default(EntityRef<RolePromission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._RolePromission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleID", DbType="UniqueIdentifier")]
		public System.Guid ModuleID
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					this.OnModuleIDChanging(value);
					this.SendPropertyChanging();
					this._ModuleID = value;
					this.SendPropertyChanged("ModuleID");
					this.OnModuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionName", DbType="NVarChar(50)")]
		public string PermissionName
		{
			get
			{
				return this._PermissionName;
			}
			set
			{
				if ((this._PermissionName != value))
				{
					this.OnPermissionNameChanging(value);
					this.SendPropertyChanging();
					this._PermissionName = value;
					this.SendPropertyChanged("PermissionName");
					this.OnPermissionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysCode", DbType="NVarChar(50)")]
		public string SysCode
		{
			get
			{
				return this._SysCode;
			}
			set
			{
				if ((this._SysCode != value))
				{
					this.OnSysCodeChanging(value);
					this.SendPropertyChanging();
					this._SysCode = value;
					this.SendPropertyChanged("SysCode");
					this.OnSysCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seq", DbType="int")]
		public System.Nullable<int> Seq
		{
			get
			{
				return this._Seq;
			}
			set
			{
				if ((this._Seq != value))
				{
					this.OnSeqChanging(value);
					this.SendPropertyChanging();
					this._Seq = value;
					this.SendPropertyChanged("Seq");
					this.OnSeqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RO_SysPromissionMTR_RO_SysModuleMTR", Storage="_RO_SysModuleMTR", ThisKey="ModuleID", OtherKey="ID")]
		public EntitySet<RO_SysModuleMTR> RO_SysModuleMTR
		{
			get
			{
				return this._RO_SysModuleMTR;
			}
			set
			{
				this._RO_SysModuleMTR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolePromission_RO_SysPromissionMTR", Storage="_RolePromission", ThisKey="ID", OtherKey="RightID", IsForeignKey=true)]
		internal RolePromission RolePromission
		{
			get
			{
				return this._RolePromission.Entity;
			}
			set
			{
				RolePromission previousValue = this._RolePromission.Entity;
				if (((previousValue != value) 
							|| (this._RolePromission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolePromission.Entity = null;
						previousValue.RO_SysPromissionMTR.Remove(this);
					}
					this._RolePromission.Entity = value;
					if ((value != null))
					{
						value.RO_SysPromissionMTR.Add(this);
						this._ID = value.RightID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("RolePromission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RO_SysModuleMTR(RO_SysModuleMTR entity)
		{
			this.SendPropertyChanging();
			entity.RO_SysPromissionMTR = this;
		}
		
		private void detach_RO_SysModuleMTR(RO_SysModuleMTR entity)
		{
			this.SendPropertyChanging();
			entity.RO_SysPromissionMTR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolePromission")]
	public partial class RolePromission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _RoleID;
		
		private System.Guid _RightID;
		
		private System.Nullable<System.Guid> _LastUpdateUserID;
		
		private System.Nullable<System.DateTime> _LastUpdateDatetime;
		
		private System.Nullable<bool> _Effectiveness;
		
		private EntitySet<RO_SysPromissionMTR> _RO_SysPromissionMTR;
		
		private EntityRef<RoleMTR> _RoleMTR;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnRoleIDChanging(System.Nullable<System.Guid> value);
    partial void OnRoleIDChanged();
    partial void OnRightIDChanging(System.Guid value);
    partial void OnRightIDChanged();
    partial void OnLastUpdateUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnLastUpdateUserIDChanged();
    partial void OnLastUpdateDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDatetimeChanged();
    partial void OnEffectivenessChanging(System.Nullable<bool> value);
    partial void OnEffectivenessChanged();
    #endregion
		
		public RolePromission()
		{
			this._RO_SysPromissionMTR = new EntitySet<RO_SysPromissionMTR>(new Action<RO_SysPromissionMTR>(this.attach_RO_SysPromissionMTR), new Action<RO_SysPromissionMTR>(this.detach_RO_SysPromissionMTR));
			this._RoleMTR = default(EntityRef<RoleMTR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._RoleMTR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightID", DbType="UniqueIdentifier")]
		public System.Guid RightID
		{
			get
			{
				return this._RightID;
			}
			set
			{
				if ((this._RightID != value))
				{
					this.OnRightIDChanging(value);
					this.SendPropertyChanging();
					this._RightID = value;
					this.SendPropertyChanged("RightID");
					this.OnRightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateUserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastUpdateUserID
		{
			get
			{
				return this._LastUpdateUserID;
			}
			set
			{
				if ((this._LastUpdateUserID != value))
				{
					this.OnLastUpdateUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateUserID = value;
					this.SendPropertyChanged("LastUpdateUserID");
					this.OnLastUpdateUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdateDatetime
		{
			get
			{
				return this._LastUpdateDatetime;
			}
			set
			{
				if ((this._LastUpdateDatetime != value))
				{
					this.OnLastUpdateDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDatetime = value;
					this.SendPropertyChanged("LastUpdateDatetime");
					this.OnLastUpdateDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effectiveness", DbType="Bit")]
		public System.Nullable<bool> Effectiveness
		{
			get
			{
				return this._Effectiveness;
			}
			set
			{
				if ((this._Effectiveness != value))
				{
					this.OnEffectivenessChanging(value);
					this.SendPropertyChanging();
					this._Effectiveness = value;
					this.SendPropertyChanged("Effectiveness");
					this.OnEffectivenessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolePromission_RO_SysPromissionMTR", Storage="_RO_SysPromissionMTR", ThisKey="RightID", OtherKey="ID")]
		public EntitySet<RO_SysPromissionMTR> RO_SysPromissionMTR
		{
			get
			{
				return this._RO_SysPromissionMTR;
			}
			set
			{
				this._RO_SysPromissionMTR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoleMTR_RolePromission", Storage="_RoleMTR", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		internal RoleMTR RoleMTR
		{
			get
			{
				return this._RoleMTR.Entity;
			}
			set
			{
				RoleMTR previousValue = this._RoleMTR.Entity;
				if (((previousValue != value) 
							|| (this._RoleMTR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMTR.Entity = null;
						previousValue.RolePromission.Remove(this);
					}
					this._RoleMTR.Entity = value;
					if ((value != null))
					{
						value.RolePromission.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("RoleMTR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RO_SysPromissionMTR(RO_SysPromissionMTR entity)
		{
			this.SendPropertyChanging();
			entity.RolePromission = this;
		}
		
		private void detach_RO_SysPromissionMTR(RO_SysPromissionMTR entity)
		{
			this.SendPropertyChanging();
			entity.RolePromission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleMTR")]
	public partial class RoleMTR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _RoleName;
		
		private System.Nullable<bool> _IsAdminstrator;
		
		private System.Nullable<System.Guid> _LastUpdateUserID;
		
		private System.Nullable<System.DateTime> _LastUpdateDatetime;
		
		private System.Nullable<bool> _Effectiveness;
		
		private EntitySet<RolePromission> _RolePromission;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnIsAdminstratorChanging(System.Nullable<bool> value);
    partial void OnIsAdminstratorChanged();
    partial void OnLastUpdateUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnLastUpdateUserIDChanged();
    partial void OnLastUpdateDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDatetimeChanged();
    partial void OnEffectivenessChanging(System.Nullable<bool> value);
    partial void OnEffectivenessChanged();
    #endregion
		
		public RoleMTR()
		{
			this._RolePromission = new EntitySet<RolePromission>(new Action<RolePromission>(this.attach_RolePromission), new Action<RolePromission>(this.detach_RolePromission));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdminstrator", DbType="Bit")]
		public System.Nullable<bool> IsAdminstrator
		{
			get
			{
				return this._IsAdminstrator;
			}
			set
			{
				if ((this._IsAdminstrator != value))
				{
					this.OnIsAdminstratorChanging(value);
					this.SendPropertyChanging();
					this._IsAdminstrator = value;
					this.SendPropertyChanged("IsAdminstrator");
					this.OnIsAdminstratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateUserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastUpdateUserID
		{
			get
			{
				return this._LastUpdateUserID;
			}
			set
			{
				if ((this._LastUpdateUserID != value))
				{
					this.OnLastUpdateUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateUserID = value;
					this.SendPropertyChanged("LastUpdateUserID");
					this.OnLastUpdateUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdateDatetime
		{
			get
			{
				return this._LastUpdateDatetime;
			}
			set
			{
				if ((this._LastUpdateDatetime != value))
				{
					this.OnLastUpdateDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDatetime = value;
					this.SendPropertyChanged("LastUpdateDatetime");
					this.OnLastUpdateDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effectiveness", DbType="Bit")]
		public System.Nullable<bool> Effectiveness
		{
			get
			{
				return this._Effectiveness;
			}
			set
			{
				if ((this._Effectiveness != value))
				{
					this.OnEffectivenessChanging(value);
					this.SendPropertyChanging();
					this._Effectiveness = value;
					this.SendPropertyChanged("Effectiveness");
					this.OnEffectivenessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoleMTR_RolePromission", Storage="_RolePromission", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<RolePromission> RolePromission
		{
			get
			{
				return this._RolePromission;
			}
			set
			{
				this._RolePromission.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RolePromission(RolePromission entity)
		{
			this.SendPropertyChanging();
			entity.RoleMTR = this;
		}
		
		private void detach_RolePromission(RolePromission entity)
		{
			this.SendPropertyChanging();
			entity.RoleMTR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleModule")]
	public partial class RoleModule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _RoleID;
		
		private System.Nullable<System.Guid> _ModuleID;
		
		private System.Nullable<System.Guid> _LastUpdateUserID;
		
		private System.Nullable<System.DateTime> _LastUpdateDatetime;
		
		private System.Nullable<bool> _Effectiveness;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnRoleIDChanging(System.Nullable<System.Guid> value);
    partial void OnRoleIDChanged();
    partial void OnModuleIDChanging(System.Nullable<System.Guid> value);
    partial void OnModuleIDChanged();
    partial void OnLastUpdateUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnLastUpdateUserIDChanged();
    partial void OnLastUpdateDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDatetimeChanged();
    partial void OnEffectivenessChanging(System.Nullable<bool> value);
    partial void OnEffectivenessChanged();
    #endregion
		
		public RoleModule()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ModuleID
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					this.OnModuleIDChanging(value);
					this.SendPropertyChanging();
					this._ModuleID = value;
					this.SendPropertyChanged("ModuleID");
					this.OnModuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateUserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastUpdateUserID
		{
			get
			{
				return this._LastUpdateUserID;
			}
			set
			{
				if ((this._LastUpdateUserID != value))
				{
					this.OnLastUpdateUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateUserID = value;
					this.SendPropertyChanged("LastUpdateUserID");
					this.OnLastUpdateUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdateDatetime
		{
			get
			{
				return this._LastUpdateDatetime;
			}
			set
			{
				if ((this._LastUpdateDatetime != value))
				{
					this.OnLastUpdateDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDatetime = value;
					this.SendPropertyChanged("LastUpdateDatetime");
					this.OnLastUpdateDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effectiveness", DbType="Bit")]
		public System.Nullable<bool> Effectiveness
		{
			get
			{
				return this._Effectiveness;
			}
			set
			{
				if ((this._Effectiveness != value))
				{
					this.OnEffectivenessChanging(value);
					this.SendPropertyChanging();
					this._Effectiveness = value;
					this.SendPropertyChanged("Effectiveness");
					this.OnEffectivenessChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
