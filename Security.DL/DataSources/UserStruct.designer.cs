#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Security.DL.DataSources
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EML_HNGSL_Security")]
	public partial class UserStructDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertRO_User(RO_User instance);
    partial void UpdateRO_User(RO_User instance);
    partial void DeleteRO_User(RO_User instance);
    partial void InsertUserMTR(UserMTR instance);
    partial void UpdateUserMTR(UserMTR instance);
    partial void DeleteUserMTR(UserMTR instance);
    partial void InsertRO_RoleMTR(RO_RoleMTR instance);
    partial void UpdateRO_RoleMTR(RO_RoleMTR instance);
    partial void DeleteRO_RoleMTR(RO_RoleMTR instance);
    partial void InsertUserLocationRelation(UserLocationRelation instance);
    partial void UpdateUserLocationRelation(UserLocationRelation instance);
    partial void DeleteUserLocationRelation(UserLocationRelation instance);
    partial void InsertUserDepartmentRelation(UserDepartmentRelation instance);
    partial void UpdateUserDepartmentRelation(UserDepartmentRelation instance);
    partial void DeleteUserDepartmentRelation(UserDepartmentRelation instance);
    #endregion
		
		public UserStructDataContext() : 
				base(global::Security.DL.Properties.Settings.Default.EML_HNGSL_SecurityConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UserStructDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserStructDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserStructDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserStructDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserRole> UserRole
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<RO_User> RO_User
		{
			get
			{
				return this.GetTable<RO_User>();
			}
		}
		
		public System.Data.Linq.Table<UserMTR> UserMTR
		{
			get
			{
				return this.GetTable<UserMTR>();
			}
		}
		
		public System.Data.Linq.Table<RO_RoleMTR> RO_RoleMTR
		{
			get
			{
				return this.GetTable<RO_RoleMTR>();
			}
		}
		
		public System.Data.Linq.Table<UserLocationRelation> UserLocationRelation
		{
			get
			{
				return this.GetTable<UserLocationRelation>();
			}
		}
		
		public System.Data.Linq.Table<UserDepartmentRelation> UserDepartmentRelation
		{
			get
			{
				return this.GetTable<UserDepartmentRelation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _UserID;
		
		private System.Nullable<System.Guid> _RoleID;
		
		private System.Nullable<System.Guid> _LastUpdateUserID;
		
		private System.Nullable<System.DateTime> _LastUpdateDatetime;
		
		private System.Nullable<bool> _Effectiveness;
		
		private EntityRef<RO_User> _RO_User;
		
		private EntityRef<UserMTR> _UserMTR;
		
		private EntityRef<RO_RoleMTR> _RO_RoleMTR;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(System.Nullable<System.Guid> value);
    partial void OnRoleIDChanged();
    partial void OnLastUpdateUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnLastUpdateUserIDChanged();
    partial void OnLastUpdateDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDatetimeChanged();
    partial void OnEffectivenessChanging(System.Nullable<bool> value);
    partial void OnEffectivenessChanged();
    #endregion
		
		public UserRole()
		{
			this._RO_User = default(EntityRef<RO_User>);
			this._UserMTR = default(EntityRef<UserMTR>);
			this._RO_RoleMTR = default(EntityRef<RO_RoleMTR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if ((this._RO_User.HasLoadedOrAssignedValue || this._UserMTR.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._RO_RoleMTR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateUserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastUpdateUserID
		{
			get
			{
				return this._LastUpdateUserID;
			}
			set
			{
				if ((this._LastUpdateUserID != value))
				{
					this.OnLastUpdateUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateUserID = value;
					this.SendPropertyChanged("LastUpdateUserID");
					this.OnLastUpdateUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdateDatetime
		{
			get
			{
				return this._LastUpdateDatetime;
			}
			set
			{
				if ((this._LastUpdateDatetime != value))
				{
					this.OnLastUpdateDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDatetime = value;
					this.SendPropertyChanged("LastUpdateDatetime");
					this.OnLastUpdateDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effectiveness", DbType="bit")]
		public System.Nullable<bool> Effectiveness
		{
			get
			{
				return this._Effectiveness;
			}
			set
			{
				if ((this._Effectiveness != value))
				{
					this.OnEffectivenessChanging(value);
					this.SendPropertyChanging();
					this._Effectiveness = value;
					this.SendPropertyChanged("Effectiveness");
					this.OnEffectivenessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RO_User_UserRole", Storage="_RO_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		internal RO_User RO_User
		{
			get
			{
				return this._RO_User.Entity;
			}
			set
			{
				RO_User previousValue = this._RO_User.Entity;
				if (((previousValue != value) 
							|| (this._RO_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RO_User.Entity = null;
						previousValue.UserRole.Remove(this);
					}
					this._RO_User.Entity = value;
					if ((value != null))
					{
						value.UserRole.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("RO_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMTR_UserRole", Storage="_UserMTR", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		internal UserMTR UserMTR
		{
			get
			{
				return this._UserMTR.Entity;
			}
			set
			{
				UserMTR previousValue = this._UserMTR.Entity;
				if (((previousValue != value) 
							|| (this._UserMTR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMTR.Entity = null;
						previousValue.UserRole.Remove(this);
					}
					this._UserMTR.Entity = value;
					if ((value != null))
					{
						value.UserRole.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UserMTR");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RO_RoleMTR_UserRole", Storage="_RO_RoleMTR", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public RO_RoleMTR RO_RoleMTR
		{
			get
			{
				return this._RO_RoleMTR.Entity;
			}
			set
			{
				RO_RoleMTR previousValue = this._RO_RoleMTR.Entity;
				if (((previousValue != value) 
							|| (this._RO_RoleMTR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RO_RoleMTR.Entity = null;
						previousValue.UserRole.Remove(this);
					}
					this._RO_RoleMTR.Entity = value;
					if ((value != null))
					{
						value.UserRole.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("RO_RoleMTR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class RO_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private string _UserName;
		
		private string _LoginAccount;
		
		private string _RoleGroup;
		
		private System.DateTime _UpdateDate;
		
		private System.Guid _RoleID;
		
		private bool _Effectiveness;
		
		private string _Password;
		
		private EntitySet<UserRole> _UserRole;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoginAccountChanging(string value);
    partial void OnLoginAccountChanged();
    partial void OnRoleGroupChanging(string value);
    partial void OnRoleGroupChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnRoleIDChanging(System.Guid value);
    partial void OnRoleIDChanged();
    partial void OnEffectivenessChanging(bool value);
    partial void OnEffectivenessChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public RO_User()
		{
			this._UserRole = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRole), new Action<UserRole>(this.detach_UserRole));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginAccount", CanBeNull=false)]
		public string LoginAccount
		{
			get
			{
				return this._LoginAccount;
			}
			set
			{
				if ((this._LoginAccount != value))
				{
					this.OnLoginAccountChanging(value);
					this.SendPropertyChanging();
					this._LoginAccount = value;
					this.SendPropertyChanged("LoginAccount");
					this.OnLoginAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleGroup", CanBeNull=false)]
		public string RoleGroup
		{
			get
			{
				return this._RoleGroup;
			}
			set
			{
				if ((this._RoleGroup != value))
				{
					this.OnRoleGroupChanging(value);
					this.SendPropertyChanging();
					this._RoleGroup = value;
					this.SendPropertyChanged("RoleGroup");
					this.OnRoleGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID")]
		public System.Guid RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effectiveness")]
		public bool Effectiveness
		{
			get
			{
				return this._Effectiveness;
			}
			set
			{
				if ((this._Effectiveness != value))
				{
					this.OnEffectivenessChanging(value);
					this.SendPropertyChanging();
					this._Effectiveness = value;
					this.SendPropertyChanged("Effectiveness");
					this.OnEffectivenessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RO_User_UserRole", Storage="_UserRole", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserRole> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				this._UserRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.RO_User = this;
		}
		
		private void detach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.RO_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserMTR")]
	public partial class UserMTR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _LoginAccount;
		
		private string _Password;
		
		private string _UserName;
		
		private System.Nullable<System.Guid> _CreatorID;
		
		private System.Nullable<System.DateTime> _LastUpdateDatetime;
		
		private System.Nullable<bool> _Effectiveness;
		
		private string _Remark1;
		
		private string _Remark2;
		
		private string _Remark3;
		
		private EntitySet<UserRole> _UserRole;
		
		private EntitySet<UserLocationRelation> _UserLocationRelation;
		
		private EntitySet<UserDepartmentRelation> _UserDepartmentRelation;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnLoginAccountChanging(string value);
    partial void OnLoginAccountChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnCreatorIDChanging(System.Nullable<System.Guid> value);
    partial void OnCreatorIDChanged();
    partial void OnLastUpdateDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDatetimeChanged();
    partial void OnEffectivenessChanging(System.Nullable<bool> value);
    partial void OnEffectivenessChanged();
    partial void OnRemark1Changing(string value);
    partial void OnRemark1Changed();
    partial void OnRemark2Changing(string value);
    partial void OnRemark2Changed();
    partial void OnRemark3Changing(string value);
    partial void OnRemark3Changed();
    #endregion
		
		public UserMTR()
		{
			this._UserRole = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRole), new Action<UserRole>(this.detach_UserRole));
			this._UserLocationRelation = new EntitySet<UserLocationRelation>(new Action<UserLocationRelation>(this.attach_UserLocationRelation), new Action<UserLocationRelation>(this.detach_UserLocationRelation));
			this._UserDepartmentRelation = new EntitySet<UserDepartmentRelation>(new Action<UserDepartmentRelation>(this.attach_UserDepartmentRelation), new Action<UserDepartmentRelation>(this.detach_UserDepartmentRelation));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginAccount", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LoginAccount
		{
			get
			{
				return this._LoginAccount;
			}
			set
			{
				if ((this._LoginAccount != value))
				{
					this.OnLoginAccountChanging(value);
					this.SendPropertyChanging();
					this._LoginAccount = value;
					this.SendPropertyChanged("LoginAccount");
					this.OnLoginAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdateDatetime
		{
			get
			{
				return this._LastUpdateDatetime;
			}
			set
			{
				if ((this._LastUpdateDatetime != value))
				{
					this.OnLastUpdateDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDatetime = value;
					this.SendPropertyChanged("LastUpdateDatetime");
					this.OnLastUpdateDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effectiveness", DbType="Bit")]
		public System.Nullable<bool> Effectiveness
		{
			get
			{
				return this._Effectiveness;
			}
			set
			{
				if ((this._Effectiveness != value))
				{
					this.OnEffectivenessChanging(value);
					this.SendPropertyChanging();
					this._Effectiveness = value;
					this.SendPropertyChanged("Effectiveness");
					this.OnEffectivenessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark1", DbType="VarChar(50)")]
		public string Remark1
		{
			get
			{
				return this._Remark1;
			}
			set
			{
				if ((this._Remark1 != value))
				{
					this.OnRemark1Changing(value);
					this.SendPropertyChanging();
					this._Remark1 = value;
					this.SendPropertyChanged("Remark1");
					this.OnRemark1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark2", DbType="VarChar(50)")]
		public string Remark2
		{
			get
			{
				return this._Remark2;
			}
			set
			{
				if ((this._Remark2 != value))
				{
					this.OnRemark2Changing(value);
					this.SendPropertyChanging();
					this._Remark2 = value;
					this.SendPropertyChanged("Remark2");
					this.OnRemark2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark3", DbType="VarChar(50)")]
		public string Remark3
		{
			get
			{
				return this._Remark3;
			}
			set
			{
				if ((this._Remark3 != value))
				{
					this.OnRemark3Changing(value);
					this.SendPropertyChanging();
					this._Remark3 = value;
					this.SendPropertyChanged("Remark3");
					this.OnRemark3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMTR_UserRole", Storage="_UserRole", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserRole> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				this._UserRole.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMTR_UserLocationRelation", Storage="_UserLocationRelation", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserLocationRelation> UserLocationRelation
		{
			get
			{
				return this._UserLocationRelation;
			}
			set
			{
				this._UserLocationRelation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMTR_UserDepartmentRelation", Storage="_UserDepartmentRelation", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserDepartmentRelation> UserDepartmentRelation
		{
			get
			{
				return this._UserDepartmentRelation;
			}
			set
			{
				this._UserDepartmentRelation.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserMTR = this;
		}
		
		private void detach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserMTR = null;
		}
		
		private void attach_UserLocationRelation(UserLocationRelation entity)
		{
			this.SendPropertyChanging();
			entity.UserMTR = this;
		}
		
		private void detach_UserLocationRelation(UserLocationRelation entity)
		{
			this.SendPropertyChanging();
			entity.UserMTR = null;
		}
		
		private void attach_UserDepartmentRelation(UserDepartmentRelation entity)
		{
			this.SendPropertyChanging();
			entity.UserMTR = this;
		}
		
		private void detach_UserDepartmentRelation(UserDepartmentRelation entity)
		{
			this.SendPropertyChanging();
			entity.UserMTR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleMTR")]
	public partial class RO_RoleMTR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _RoleName;
		
		private System.Nullable<bool> _IsAdminstrator;
		
		private System.Nullable<System.Guid> _LastUpdateUserID;
		
		private System.Nullable<System.DateTime> _LastUpdateDatetime;
		
		private System.Nullable<bool> _Effectiveness;
		
		private EntitySet<UserRole> _UserRole;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnIsAdminstratorChanging(System.Nullable<bool> value);
    partial void OnIsAdminstratorChanged();
    partial void OnLastUpdateUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnLastUpdateUserIDChanged();
    partial void OnLastUpdateDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDatetimeChanged();
    partial void OnEffectivenessChanging(System.Nullable<bool> value);
    partial void OnEffectivenessChanged();
    #endregion
		
		public RO_RoleMTR()
		{
			this._UserRole = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRole), new Action<UserRole>(this.detach_UserRole));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdminstrator", DbType="Bit")]
		public System.Nullable<bool> IsAdminstrator
		{
			get
			{
				return this._IsAdminstrator;
			}
			set
			{
				if ((this._IsAdminstrator != value))
				{
					this.OnIsAdminstratorChanging(value);
					this.SendPropertyChanging();
					this._IsAdminstrator = value;
					this.SendPropertyChanged("IsAdminstrator");
					this.OnIsAdminstratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateUserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastUpdateUserID
		{
			get
			{
				return this._LastUpdateUserID;
			}
			set
			{
				if ((this._LastUpdateUserID != value))
				{
					this.OnLastUpdateUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateUserID = value;
					this.SendPropertyChanged("LastUpdateUserID");
					this.OnLastUpdateUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdateDatetime
		{
			get
			{
				return this._LastUpdateDatetime;
			}
			set
			{
				if ((this._LastUpdateDatetime != value))
				{
					this.OnLastUpdateDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDatetime = value;
					this.SendPropertyChanged("LastUpdateDatetime");
					this.OnLastUpdateDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effectiveness", DbType="Bit")]
		public System.Nullable<bool> Effectiveness
		{
			get
			{
				return this._Effectiveness;
			}
			set
			{
				if ((this._Effectiveness != value))
				{
					this.OnEffectivenessChanging(value);
					this.SendPropertyChanging();
					this._Effectiveness = value;
					this.SendPropertyChanged("Effectiveness");
					this.OnEffectivenessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RO_RoleMTR_UserRole", Storage="_UserRole", ThisKey="ID", OtherKey="RoleID")]
		internal EntitySet<UserRole> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				this._UserRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.RO_RoleMTR = this;
		}
		
		private void detach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.RO_RoleMTR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLocationRelation")]
	public partial class UserLocationRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _UserID;
		
		private string _CompanyCode;
		
		private int _LocationTypeID;
		
		private string _LocationCode;
		
		private string _Department;
		
		private System.Guid _LastUpdateUserID;
		
		private System.DateTime _LastUpdateDatetime;
		
		private EntityRef<UserMTR> _UserMTR;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnCompanyCodeChanging(string value);
    partial void OnCompanyCodeChanged();
    partial void OnLocationTypeIDChanging(int value);
    partial void OnLocationTypeIDChanged();
    partial void OnLocationCodeChanging(string value);
    partial void OnLocationCodeChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnLastUpdateUserIDChanging(System.Guid value);
    partial void OnLastUpdateUserIDChanged();
    partial void OnLastUpdateDatetimeChanging(System.DateTime value);
    partial void OnLastUpdateDatetimeChanged();
    #endregion
		
		public UserLocationRelation()
		{
			this._UserMTR = default(EntityRef<UserMTR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserMTR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CompanyCode
		{
			get
			{
				return this._CompanyCode;
			}
			set
			{
				if ((this._CompanyCode != value))
				{
					this.OnCompanyCodeChanging(value);
					this.SendPropertyChanging();
					this._CompanyCode = value;
					this.SendPropertyChanged("CompanyCode");
					this.OnCompanyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationTypeID", DbType="Int NOT NULL")]
		public int LocationTypeID
		{
			get
			{
				return this._LocationTypeID;
			}
			set
			{
				if ((this._LocationTypeID != value))
				{
					this.OnLocationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LocationTypeID = value;
					this.SendPropertyChanged("LocationTypeID");
					this.OnLocationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string LocationCode
		{
			get
			{
				return this._LocationCode;
			}
			set
			{
				if ((this._LocationCode != value))
				{
					this.OnLocationCodeChanging(value);
					this.SendPropertyChanging();
					this._LocationCode = value;
					this.SendPropertyChanged("LocationCode");
					this.OnLocationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(50)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateUserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LastUpdateUserID
		{
			get
			{
				return this._LastUpdateUserID;
			}
			set
			{
				if ((this._LastUpdateUserID != value))
				{
					this.OnLastUpdateUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateUserID = value;
					this.SendPropertyChanged("LastUpdateUserID");
					this.OnLastUpdateUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDatetime", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdateDatetime
		{
			get
			{
				return this._LastUpdateDatetime;
			}
			set
			{
				if ((this._LastUpdateDatetime != value))
				{
					this.OnLastUpdateDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDatetime = value;
					this.SendPropertyChanged("LastUpdateDatetime");
					this.OnLastUpdateDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMTR_UserLocationRelation", Storage="_UserMTR", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		internal UserMTR UserMTR
		{
			get
			{
				return this._UserMTR.Entity;
			}
			set
			{
				UserMTR previousValue = this._UserMTR.Entity;
				if (((previousValue != value) 
							|| (this._UserMTR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMTR.Entity = null;
						previousValue.UserLocationRelation.Remove(this);
					}
					this._UserMTR.Entity = value;
					if ((value != null))
					{
						value.UserLocationRelation.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("UserMTR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDepartmentRelation")]
	public partial class UserDepartmentRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _UserID;
		
		private System.Guid _DepartmentID;
		
		private System.Guid _LastUpdateUserID;
		
		private System.DateTime _LastUpdateTime;
		
		private EntityRef<UserMTR> _UserMTR;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnDepartmentIDChanging(System.Guid value);
    partial void OnDepartmentIDChanged();
    partial void OnLastUpdateUserIDChanging(System.Guid value);
    partial void OnLastUpdateUserIDChanged();
    partial void OnLastUpdateTimeChanging(System.DateTime value);
    partial void OnLastUpdateTimeChanged();
    #endregion
		
		public UserDepartmentRelation()
		{
			this._UserMTR = default(EntityRef<UserMTR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserMTR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateUserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LastUpdateUserID
		{
			get
			{
				return this._LastUpdateUserID;
			}
			set
			{
				if ((this._LastUpdateUserID != value))
				{
					this.OnLastUpdateUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateUserID = value;
					this.SendPropertyChanged("LastUpdateUserID");
					this.OnLastUpdateUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdateTime
		{
			get
			{
				return this._LastUpdateTime;
			}
			set
			{
				if ((this._LastUpdateTime != value))
				{
					this.OnLastUpdateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateTime = value;
					this.SendPropertyChanged("LastUpdateTime");
					this.OnLastUpdateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMTR_UserDepartmentRelation", Storage="_UserMTR", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		internal UserMTR UserMTR
		{
			get
			{
				return this._UserMTR.Entity;
			}
			set
			{
				UserMTR previousValue = this._UserMTR.Entity;
				if (((previousValue != value) 
							|| (this._UserMTR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMTR.Entity = null;
						previousValue.UserDepartmentRelation.Remove(this);
					}
					this._UserMTR.Entity = value;
					if ((value != null))
					{
						value.UserDepartmentRelation.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("UserMTR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
